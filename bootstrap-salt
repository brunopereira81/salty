#!/bin/bash

if [ -f /etc/redhat-release ]; then
  release="redhat"
fi

_PKI_DIR=/etc/salt/pki
_SALT_ROOTFILES=/srv
_CURRENT_DIR=$(pwd)
_EPEL_RELEASE=http://ftp.linux.ncsu.edu/pub/epel/6/i386/epel-release-6-8.noarch.rpm
_CONTROLLER_NAME=""



echo -e "\n/\\___/\\"
echo "\\ -.- /"
echo "\`-.^.-'                                    **xCAT** "   
echo -e "  /\"\  “Cats are intended to teach us that not everything in nature has a purpose.” \n"

clean(){

  rpm -e $_EPEL_RELEASE
  yum --enablerepo=epel-testing remove -y salt-master
  yum --enablerepo=epel-testing remove -y salt-minion
  rm -rf /etc/salt

} &> /dev/null

xcat_pre(){
  wget -P /etc/yum.repos.d/ http://sourceforge.net/projects/xcat/files/yum/2.8/xcat-core/xCAT-core.repo
  wget -P /etc/yum/repos.d/ http://sourceforge.net/projects/xcat/files/yum/xcat-dep/rh6/x86_64/xCAT-dep.repo
  yum update -y
}

salt_setup(){
    
  #Install necessary packages
  rpm -Uvh $_EPEL_RELEASE
  yum --enablerepo=epel-testing install -y salt-master
  yum --enablerepo=epel-testing install -y salt-minion
  yum install -y pysnmp
  yum install -y python-pyasn1

  #Backup and configure the minion's configuration file
  /bin/cp /etc/salt/minion /etc/salt/minion.pkged

	cat <<-EOF > /etc/salt/minion
	#Generated from bootstrap script
	master: $_CONTROLLER_NAME
	id: $_CONTROLLER_NAME
	schedule:
          highstate:
          function: state.highstate
          minutes: 5
	EOF

  #Backup and configure the master's configuration file
  /bin/cp /etc/salt/master /etc/salt/master.pkged

	cat <<-EOF > /etc/salt/master
	#Generated from bootstrap script
	file_roots:
	  base:
	    - /srv/salt/base

	pillar_roots:
	  base:
	    - /srv/salt/pillars
	EOF

  # Let's create the necessary directories
  [ -d $_PKI_DIR/minion ] || mkdir -p $_PKI_DIR/minion && chmod 700 $_PKI_DIR/minion || return 1
  [ -d $_PKI_DIR/master/minions ] || mkdir -p $_PKI_DIR/master/minions && chmod 700 $_PKI_DIR/master/minions || return 1
  [ -d /srv/salt/base ] || mkdir -p /srv/salt/base && chmod 700 /srv/salt/base || return 1
  [ -d /srv/salt/pillars ] || mkdir -p /srv/salt/pillars && chmod 700 /srv/salt/pillars || return 1

  #And copy our awesome configuration files
  cp -r ./salt $_SALT_ROOTFILES
  
  #Generate keys and preseed master with its key
  salt-key --gen-keys="$_PKI_DIR"/minion/minion
  /bin/cp "$_PKI_DIR"/minion/minion.pub $_PKI_DIR/master/minions/$_CONTROLLER_NAME
  /bin/rm -rf /tmp/$_CONTROLLER_NAME.p*

} &> /dev/null

salt_services_start(){

  chkconfig salt-master on
  service salt-master start
  chkconfig salt-minion on
  service salt-minion start

}

read -p "What shall we name this controller? [$(hostname)]: " _CONTROLLER_NAME
if [ -z "$_CONTROLLER_NAME" ]; then
  _CONTROLLER_NAME=$(hostname)
fi

echo -e "\nUsing current directory $_CURRENT_DIR"
echo -e "Salt master will be $_CONTROLLER_NAME"
echo -e "State and pillar files for salt will be copied to $_SALT_ROOTFILES/salt\n"

while true; do
  read -p "Do you wish to proceed? [y/n]: " yn
    case $yn in
      [Yy]* ) break;;
      [Nn]* ) exit;;
      * ) echo "Please answer yes or no.";;
    esac
done

echo -e "\nCleaning up previous installation"
clean
xcat_pre

echo -e "Installing and configuring salt"
salt_setup

echo -e "Adapting system to our configuration"
awk -v hostname="$_CONTROLLER_NAME" '/^master.controller:/{$0="master.controller: " hostname}1' ./salt/pillars/_env.sls > $_SALT_ROOTFILES/salt/pillars/_env.sls
awk -v hostname="$_CONTROLLER_NAME" '/^HOSTNAME=/{$0="HOSTNAME=" hostname}1' ./salt/base/controller/files/network > $_SALT_ROOTFILES/salt/base/controller/files/network
hostname $_CONTROLLER_NAME
echo "127.0.0.1 localhost $_CONTROLLER_NAME" > /etc/hosts
echo "HOSTNAME=$_CONTROLLER_NAME" > /etc/sysconfig/network

echo -e "Starting salt services...\n"
salt_services_start


echo -e "\nRunning first instance of high state... (might take a while)"
salt '*' state.highstate

echo -e "\nRestoring xCat tables: $(/opt/xcat/sbin/restorexCATdb -p /srv/salt/base/controller/files/tables)"

echo -e "\nDone!"
